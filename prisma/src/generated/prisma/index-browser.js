
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
Prisma.prismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  role: 'role',
  isFirstLogin: 'isFirstLogin',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isFromBpk: 'isFromBpk'
};

exports.Prisma.EventScalarFieldEnum = {
  id: 'id',
  name: 'name',
  banner: 'banner',
  description: 'description',
  eventStartDate: 'eventStartDate',
  eventEndDate: 'eventEndDate',
  submissionStartDate: 'submissionStartDate',
  submissionEndDate: 'submissionEndDate',
  status: 'status',
  evaluationType: 'evaluationType',
  isActive: 'isActive',
  checklistId: 'checklistId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ArticleScalarFieldEnum = {
  id: 'id',
  title: 'title',
  summary: 'summary',
  thematicArea: 'thematicArea',
  currentVersion: 'currentVersion',
  evaluationsDone: 'evaluationsDone',
  status: 'status',
  eventId: 'eventId',
  userId: 'userId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ArticleVersionScalarFieldEnum = {
  id: 'id',
  version: 'version',
  pdfPath: 'pdfPath',
  articleId: 'articleId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ArticleKeywordScalarFieldEnum = {
  id: 'id',
  name: 'name',
  articleId: 'articleId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RelatedAuthorScalarFieldEnum = {
  id: 'id',
  coAuthorName: 'coAuthorName',
  articleId: 'articleId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EvaluationScalarFieldEnum = {
  id: 'id',
  grade: 'grade',
  evaluationDescription: 'evaluationDescription',
  evaluationDate: 'evaluationDate',
  userId: 'userId',
  status: 'status',
  articleVersionId: 'articleVersionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EventEvaluatorScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  userId: 'userId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ArticleEvaluatorAssignmentScalarFieldEnum = {
  id: 'id',
  eventEvaluatorId: 'eventEvaluatorId',
  articleId: 'articleId',
  userId: 'userId',
  isCorrected: 'isCorrected',
  assignedAt: 'assignedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChecklistScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuestionScalarFieldEnum = {
  id: 'id',
  description: 'description',
  type: 'type',
  isRequired: 'isRequired',
  checklistId: 'checklistId',
  order: 'order',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuestionResponseScalarFieldEnum = {
  id: 'id',
  questionId: 'questionId',
  articleVersionId: 'articleVersionId',
  userId: 'userId',
  booleanResponse: 'booleanResponse',
  scaleResponse: 'scaleResponse',
  textResponse: 'textResponse',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.RoleType = exports.$Enums.RoleType = {
  STUDENT: 'STUDENT',
  EVALUATOR: 'EVALUATOR',
  COORDINATOR: 'COORDINATOR'
};

exports.EventStatus = exports.$Enums.EventStatus = {
  IN_PREPARATION: 'IN_PREPARATION',
  SUBMISSIONS_OPEN: 'SUBMISSIONS_OPEN',
  IN_EVALUATION: 'IN_EVALUATION',
  FINISHED: 'FINISHED'
};

exports.EvaluationType = exports.$Enums.EvaluationType = {
  DIRECT: 'DIRECT',
  PAIR: 'PAIR',
  PANEL: 'PANEL'
};

exports.ArticleStatus = exports.$Enums.ArticleStatus = {
  SUBMITTED: 'SUBMITTED',
  IN_EVALUATION: 'IN_EVALUATION',
  APPROVED: 'APPROVED',
  IN_CORRECTION: 'IN_CORRECTION',
  REJECTED: 'REJECTED'
};

exports.EvaluationStatus = exports.$Enums.EvaluationStatus = {
  APPROVED: 'APPROVED',
  TO_CORRECTION: 'TO_CORRECTION',
  REJECTED: 'REJECTED'
};

exports.QuestionType = exports.$Enums.QuestionType = {
  YES_NO: 'YES_NO',
  SCALE: 'SCALE',
  TEXT: 'TEXT'
};

exports.Prisma.ModelName = {
  User: 'User',
  Event: 'Event',
  Article: 'Article',
  ArticleVersion: 'ArticleVersion',
  ArticleKeyword: 'ArticleKeyword',
  RelatedAuthor: 'RelatedAuthor',
  Evaluation: 'Evaluation',
  EventEvaluator: 'EventEvaluator',
  ArticleEvaluatorAssignment: 'ArticleEvaluatorAssignment',
  Checklist: 'Checklist',
  Question: 'Question',
  QuestionResponse: 'QuestionResponse'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
