generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// ENUMS
// ========================================

enum ArticleStatus {
  SUBMITTED      // Submetido
  IN_EVALUATION  // Em Avaliação
  APPROVED       // Aprovado
  APPROVED_WITH_REMARKS
  IN_CORRECTION // Aprovado com Ressalvas
  REJECTED       // Reprovado

  @@map("article_status")
}

enum EvaluationStatus {
  APPROVED
  TO_CORRECTION
  REJECTED
  @@map("evaluation_status")
}

enum EventStatus {
  IN_PREPARATION      // Em Preparação
  SUBMISSIONS_OPEN    // Submissões Abertas
  IN_EVALUATION       // Em Avaliação
  FINISHED           // Finalizado

  @@map("event_status")
}

enum EvaluationType {
  DIRECT  // Direto (1 avaliador)
  PAIR    // Par (2 avaliadores)
  PANEL   // Banca (3+ avaliadores)

  @@map("evaluation_type")
}

enum RoleType {
  STUDENT      // Aluno/Autor
  EVALUATOR    // Avaliador
  COORDINATOR  // Coordenador

  @@map("role_type")
}

enum QuestionType {
  YES_NO    // Sim/Não
  SCALE     // Escala 1-5
  TEXT      // Texto livre

  @@map("question_type")
}

// ========================================
// CORE ENTITIES
// ========================================

model User {
  id          String   @id @default(uuid()) @db.Uuid
  email       String   @unique @db.VarChar(100)
  password    String   @db.VarChar(300)
  name        String   @db.VarChar(100)
  role        RoleType @default(STUDENT)
  isFirstLogin Boolean  @default(false) @map("is_first_login")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  isFromBpk   Boolean  @default(true) @map("is_from_bpk")

  // Relacionamentos - ✅ REMOVIDO: userRoles
  articles             Article[]
  evaluations          Evaluation[]
  eventEvaluators      EventEvaluator[]
  questionResponses    QuestionResponse[]
  articleAssignments   ArticleEvaluatorAssignment[]

  @@index([email])
  @@index([isActive])
  @@index([role]) // ✅ ADICIONADO: Índice para role
  @@map("users")
}

// ========================================
// ✅ REMOVIDO: Tabelas Role e UserRole completamente
// ========================================

// ========================================
// EVENT MANAGEMENT
// ========================================

model Event {
  id                    String      @id @default(uuid()) @db.Uuid
  name                  String      @db.VarChar(150)
  banner               String?     @db.VarChar(200)
  description          String?     @db.VarChar(300)
  eventStartDate       DateTime    @map("event_start_date")
  eventEndDate         DateTime    @map("event_end_date")
  submissionStartDate  DateTime    @map("submission_start_date")
  submissionEndDate    DateTime    @map("submission_end_date")
  status               EventStatus @default(IN_PREPARATION)
  evaluationType       EvaluationType @map("evaluation_type")
  isActive             Boolean     @default(true) @map("is_active")
  checklistId          String?     @map("checklist_id") @db.Uuid // ✅ NOVA COLUNA
  createdAt           DateTime    @default(now()) @map("created_at")
  updatedAt           DateTime    @updatedAt @map("updated_at")

  // Relacionamentos
  articles         Article[]
  eventEvaluators  EventEvaluator[]
  checklist        Checklist? @relation(fields: [checklistId], references: [id], onDelete: SetNull) // ✅ NOVO

  @@index([status])
  @@index([isActive])
  @@index([submissionStartDate, submissionEndDate])
  @@index([checklistId]) // ✅ NOVO ÍNDICE
  @@map("events")
}

// ========================================
// ARTICLE MANAGEMENT
// ========================================

model Article {
  id              String        @id @default(uuid()) @db.Uuid
  title           String        @db.VarChar(150)
  summary         String        @db.VarChar(1000)
  thematicArea    String?       @map("thematic_area") @db.VarChar(150)
  currentVersion  Int           @default(1) @map("current_version")
  evaluationsDone Int           @default(0) @map("evaluations_done")
  status          ArticleStatus @default(SUBMITTED)
  eventId         String        @map("event_id") @db.Uuid
  userId          String        @map("user_id") @db.Uuid
  isActive        Boolean       @default(true) @map("is_active")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  // Relacionamentos
  event                Event                          @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user                 User                           @relation(fields: [userId], references: [id], onDelete: Cascade)
  versions             ArticleVersion[]
  keywords             ArticleKeyword[]
  relatedAuthors       RelatedAuthor[]
  evaluatorAssignments ArticleEvaluatorAssignment[]

  @@index([eventId])
  @@index([userId])
  @@index([status])
  @@index([isActive])
  @@map("articles")
}

model ArticleVersion {
  id        String   @id @default(uuid()) @db.Uuid
  version   Int
  pdfPath   String   @map("pdf_path") @db.VarChar(200)
  articleId String   @map("article_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  article           Article            @relation(fields: [articleId], references: [id], onDelete: Cascade)
  evaluations       Evaluation[]
  questionResponses QuestionResponse[]

  @@unique([articleId, version])
  @@index([articleId])
  @@map("article_versions")
}

model ArticleKeyword {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @db.VarChar(45)
  articleId String   @map("article_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@index([articleId])
  @@map("article_keywords")
}

model RelatedAuthor {
  id          String   @id @default(uuid()) @db.Uuid
  coAuthorName String   @map("co_author_name") @db.VarChar(100)
  articleId   String   @map("article_id") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@index([articleId])
  @@map("related_authors")
}

// ========================================
// EVALUATION SYSTEM
// ========================================

model Evaluation {
  id                 String   @id @default(uuid()) @db.Uuid
  grade              Int      @db.SmallInt // 0-10
  evaluationDescription String? @map("evaluation_description") @db.Text
  evaluationDate     DateTime @map("evaluation_date")
  userId             String   @map("user_id") @db.Uuid
  status            EvaluationStatus @default(TO_CORRECTION) // Status do artigo após avaliação
  articleVersionId   String   @map("article_version_id") @db.Uuid
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  articleVersion ArticleVersion @relation(fields: [articleVersionId], references: [id], onDelete: Cascade)

  @@unique([userId, articleVersionId])
  @@index([userId])
  @@index([articleVersionId])
  @@index([evaluationDate])
  @@map("evaluations")
}

model EventEvaluator {
  id       String   @id @default(uuid()) @db.Uuid
  eventId  String   @map("event_id") @db.Uuid
  userId   String   @map("user_id") @db.Uuid
  isActive Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  event              Event                          @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user               User                           @relation(fields: [userId], references: [id], onDelete: Cascade)
  articleAssignments ArticleEvaluatorAssignment[]

  @@unique([eventId, userId])
  @@index([eventId])
  @@index([userId])
  @@map("event_evaluators")
}

model ArticleEvaluatorAssignment {
  id              String   @id @default(uuid()) @db.Uuid
  eventEvaluatorId String   @map("event_evaluator_id") @db.Uuid
  articleId       String   @map("article_id") @db.Uuid
  userId          String   @map("user_id") @db.Uuid
  isCorrected     Boolean  @default(false) @map("is_corrected")
  assignedAt      DateTime @default(now()) @map("assigned_at")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  eventEvaluator EventEvaluator @relation(fields: [eventEvaluatorId], references: [id], onDelete: Cascade)
  article        Article        @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventEvaluatorId, articleId])
  @@index([eventEvaluatorId])
  @@index([articleId])
  @@index([userId])
  @@index([isCorrected])
  @@map("article_evaluator_assignments")
}

// ========================================
// CHECKLIST SYSTEM
// ========================================

model Checklist {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @db.VarChar(100)
  description String?  @db.VarChar(300)
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  questions Question[]
  events    Event[]

  @@index([isActive])
  @@map("checklists")
}

model Question {
  id          String       @id @default(uuid()) @db.Uuid
  description String       @db.VarChar(200)
  type        QuestionType @default(YES_NO)
  isRequired  Boolean      @default(true) @map("is_required")
  checklistId String       @map("checklist_id") @db.Uuid // ✅ RENOMEADO (era event_checklist_id)
  order       Int          @default(0)
  isActive    Boolean      @default(true) @map("is_active")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  // Relacionamentos
  checklist         Checklist        @relation(fields: [checklistId], references: [id], onDelete: Cascade) // ✅ MODIFICADO
  questionResponses QuestionResponse[]

  @@index([checklistId]) // ✅ MODIFICADO (era event_checklist_id)
  @@index([order])
  @@index([isActive])
  @@map("questions")
}

model QuestionResponse {
  id               String   @id @default(uuid()) @db.Uuid
  questionId       String   @map("question_id") @db.Uuid
  articleVersionId String   @map("article_version_id") @db.Uuid
  userId           String   @map("user_id") @db.Uuid
  booleanResponse  Boolean? @map("boolean_response")
  scaleResponse    Int?     @map("scale_response") @db.SmallInt // 1-5
  textResponse     String?  @map("text_response") @db.Text
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  question       Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  articleVersion ArticleVersion @relation(fields: [articleVersionId], references: [id], onDelete: Cascade)
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([questionId, articleVersionId, userId])
  @@index([questionId])
  @@index([articleVersionId])
  @@index([userId])
  @@map("question_responses")
}
